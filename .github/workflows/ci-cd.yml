name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# 添加权限配置
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    name: 运行单元测试
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: 缓存 Maven 依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 运行测试
      run: ./mvnw clean test
      
    - name: 生成测试报告
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: 构建并部署到 AWS EC2
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: 缓存 Maven 依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 构建应用
      run: ./mvnw clean package -DskipTests
      
    - name: 登录 Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 确保 Docker Hub 仓库存在
      run: |
        echo "检查并创建 Docker Hub 仓库..."
        # 尝试拉取镜像来检查仓库是否存在，如果不存在会失败但不影响后续步骤
        docker pull ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest || echo "仓库不存在，将在首次推送时自动创建"
        
    - name: 构建并推送 Docker 镜像
      run: |
        # 构建镜像
        docker build -t ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest .
        
        # 为同一镜像添加额外标签
        docker tag ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest ${{ secrets.DOCKER_USERNAME }}/hdbpilot:${{ github.sha }}
        
        # 推送镜像
        docker push ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/hdbpilot:${{ github.sha }}
        
        
    - name: 部署到 AWS EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          # 停止现有容器
          docker stop hdbpilot || true
          docker rm hdbpilot || true
          
          # 拉取最新镜像
          docker pull ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest
          
          # 运行新容器
          docker run -d \
            --name hdbpilot \
            --restart unless-stopped \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest
          
          # 清理未使用的镜像
          docker image prune -f 