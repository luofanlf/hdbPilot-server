name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# 添加权限配置
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  # SCA - Software Composition Analysis
  sca:
    runs-on: ubuntu-latest
    name: Software Composition Analysis (SCA)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload SCA report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-report
        path: trivy-results.sarif
        retention-days: 30

  # SAST - Static Application Security Testing
  sast:
    runs-on: ubuntu-latest
    name: Semgrep Static Code Scanning (SAST)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: auto
        args: --sarif --output=semgrep-report.sarif

    - name: Upload Semgrep report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-report
        path: semgrep-report.sarif
        retention-days: 30

  test:
    runs-on: ubuntu-latest
    name: Run Unit Tests
    needs: [sca, sast]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: ./mvnw clean test
      env:
        AWS_ACCESS_KEY: test-access-key
        AWS_SECRET_KEY: test-secret-key
        DB_PASSWORD: test-password
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Build and Deploy to AWS EC2
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Ensure Docker Hub repository exists
      run: |
        echo "Checking and creating Docker Hub repository..."
        docker pull ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest || echo "Repository does not exist, will be created on first push"
        
    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest .
        docker tag ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest ${{ secrets.DOCKER_USERNAME }}/hdbpilot:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/hdbpilot:${{ github.sha }}
        
    - name: Test SSH connection
      run: |
        echo "=== Preparing private key file ==="
        echo "$EC2_PRIVATE_KEY" > /tmp/debug_key
        chmod 600 /tmp/debug_key
        echo "Private key file created"
        
        echo "=== Testing SSH connection ==="
        ssh -i /tmp/debug_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ConnectTimeout=10 \
            -vvv \
            $EC2_USERNAME@$EC2_HOST \
            "echo 'SSH connection successful'; whoami; pwd" || echo "SSH connection failed"
        
        rm -f /tmp/debug_key
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          docker stop hdbpilot || true
          docker rm hdbpilot || true
          docker pull ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest
          
          docker run -d \
            --name hdbpilot \
            --network app-network \
            --restart unless-stopped \
            -p 8080:8080 \
            -v /home/ubuntu/hdbpilot-logs:/logs \
            -v /home/ubuntu/application-prod.yml:/config/application-prod.yml \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_USERNAME='${{ secrets.DB_USERNAME }}' \
            -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
            -e AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY }}' \
            -e AWS_SECRET_KEY='${{ secrets.AWS_SECRET_KEY }}' \
            ${{ secrets.DOCKER_USERNAME }}/hdbpilot:latest
          
          # 健康检查 - 检查容器状态
          echo "=== 检查Docker容器状态 ==="
          sleep 10
          docker ps -a | grep hdbpilot
          
          # 验证容器是否正在运行
          if docker ps --filter "name=hdbpilot" --filter "status=running" | grep -q hdbpilot; then
              echo "✅ Docker容器(hdbpilot)启动成功"
          else
              echo "❌ Docker容器(hdbpilot)启动失败"
              # 尝试打印日志，此时因为 run 失败，可能会报错 "No such container"
              docker logs hdbpilot || echo "无法获取日志，容器可能从未成功创建。"
              exit 1
          fi